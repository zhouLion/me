<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhoulion.github.io/me</id>
    <title>Snoopy</title>
    <updated>2021-08-15T01:41:20.644Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhoulion.github.io/me"/>
    <link rel="self" href="https://zhoulion.github.io/me/atom.xml"/>
    <subtitle>think slowly</subtitle>
    <logo>https://zhoulion.github.io/me/images/avatar.png</logo>
    <icon>https://zhoulion.github.io/me/favicon.ico</icon>
    <rights>All rights reserved 2021, Snoopy</rights>
    <entry>
        <title type="html"><![CDATA[如何打开生产环境的 Vue Devtools？]]></title>
        <id>https://zhoulion.github.io/me/post/ru-he-da-kai-sheng-chan-huan-jing-de-vue-devtools/</id>
        <link href="https://zhoulion.github.io/me/post/ru-he-da-kai-sheng-chan-huan-jing-de-vue-devtools/">
        </link>
        <updated>2021-08-15T01:30:03.000Z</updated>
        <content type="html"><![CDATA[<p>「<br>
不要吹灭你的灵感和你的想象力; 不要成为你的模型的奴隶。 ——文森特・梵高<br>
」</p>
<p>打开掘金首页，nuxt 图标亮了起来 🐒  那就借掘金的宝地，记录一下如何在生产环境下，开启 vue 项目的 Devtools 调试工具。<br>
首先，我们要知道 Vue 调试工具的启动流程</p>
<h2 id="vue-是怎么开启-devtools-插件的">Vue 是怎么开启 Devtools 插件的？</h2>
<p><img src="https://zhoulion.github.io/me/post-images/1628991158431.png" alt="" loading="lazy"><br>
这段是 Vue2 源码的 9095 行左右的代码：  <code>config.devtools</code> 是声明在 Vue 构造函数上的配置项，在开发环境默认值为 true，而在生产环境默认为 false，表示不开启，因此我们平常只能在开发环境上开启调试工具。</p>
<p>🕵️ 聪明的你一定也想到了，开启 Devtools 其实只需要一行关键代码</p>
<p><code>devtools.emit('init', Vue);</code></p>
<h2 id="开启-devtools-插件的关键代码">开启 Devtools 插件的关键代码</h2>
<p>理论上，我们只要在浏览器控制台执行这一行代码 <code>devtools.emit('init', Vue);</code>，便能开启 Devtools 插件。但是里面有两个未知因素 -- <code>devtools</code> 和 <code>Vue</code></p>
<h3 id="怎样获取-devtools">怎样获取 devtools</h3>
<p>顺藤摸瓜，我在源码中找到了插件 devtools 对应的全局变量： <code>__VUE_DEVTOOLS_GLOBAL_HOOK__</code></p>
<h3 id="怎么获取-vue">怎么获取 Vue</h3>
<p>为什么说 Vue 也是未知因素呢？是因为经过 webpack 打包后代码，其中 Vue 被塞进 chunk 里，不会暴露全局变量了。不过好在每一个由 Vue 组件生成的元素都留了个「后门」-- <strong>vue</strong>，该属性值指向元素的 vue 实例。 通过审查元素，我找到了掘金首页的根元素<code>「&lt;div id=&quot;__nuxt&quot;&gt;...&lt;/div&gt;」</code></p>
<p>根节点元素的 <strong>vue</strong> 所指向的vm 实例，正是我们在 main 函数中的 new Vue({...}).$mount(target) 。所以根据 <code>Javascript</code> 原型链法则，可推导出：<code>若存在 vm = new Vue()，则 Vue = vm.constructor</code><br>
Vue 到手👋。</p>
<h2 id="求解">求解</h2>
<p>现在可以将两个未知数代入到这个「方程式」里执行了，下面是控制台要执行的代码 先声明这两个变量：</p>
<pre><code class="language-js">const devtools = window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
// 小tips，在控制台 $ 可替代 document.querySelector
// `$('#__nuxt')` 是掘金站点的 root 节点。需要注意的是，不同的项目 root 节点有所不同
const Vue = $('#__nuxt').__vue__.constructor;
</code></pre>
<p>再依次执行：</p>
<pre><code class="language-js">// 这个也是额外的知识点 @see https://cn.vuejs.org/v2/api/#devtools
Vue.conifg.devtools = true;

devtools.emit('init', Vue);
</code></pre>
<p>执行之后，需要关闭控制台再重新打开，才能看到出现了 Vue 调试面板。</p>
<p>参考：<br>
<a href="https://cn.vuejs.org/v2/api/#devtools">Vue api - devtools</a><br>
<a href="https://github1s.com/vuejs/vue/blob/HEAD/dist/vue.js">vue.js — vuejs/vue</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[变量提升和暂时性死区]]></title>
        <id>https://zhoulion.github.io/me/post/bian-liang-ti-sheng-he-zan-shi-xing-si-qu/</id>
        <link href="https://zhoulion.github.io/me/post/bian-liang-ti-sheng-he-zan-shi-xing-si-qu/">
        </link>
        <updated>2021-08-12T01:53:55.000Z</updated>
        <content type="html"><![CDATA[<p>😣<code>Variable hoisting</code> <code>Temporal Dead Zone</code></p>
<blockquote>
<p>对于一个变量，没有任何理由多此一举地在定义它之前去调用它</p>
</blockquote>
<h2 id="变量提升-variable-hoisting">变量提升 (Variable hoisting)</h2>
<p>变量提升可以简单地理解为，变量声明被移动到函数块的最顶端。<br>
就像下面的代码</p>
<pre><code class="language-js">function test() {
    console.log(myVar);
    var myVar = 10;
    console.log(myVar);
}
test();

// Output
//&gt; undefined
//&gt; 10
</code></pre>
<p>执行的时候，变量被解释器偷偷地提升了</p>
<pre><code class="language-js">function test() {
    var myVar;
    console.log(myVar);
    myVar = 10;
    console.log(myVar);
}
test();
</code></pre>
<h2 id="变量提升的简单流程">变量提升的简单流程</h2>
<p>Javascript 执行代码都要分两个阶段，「创建阶段」(creation phase) 和 「执行阶段」(execution phase)。</p>
<ul>
<li>创建阶段：函数调用前，JS 引擎进行上下文的扫描，收集函数能访问的数据范围，即<strong>作用域</strong>，并且专门开辟一块内存空间，用来存储函数的 <code>function scope</code> 函数作用域，解释器将进行它们的值初始化为 <code>undefined</code>。</li>
<li>执行阶段：JS 引擎在函数执行期间，是从这块内存空间里，去读去写这里面的数据。<br>
所以看起来就好像所有的变量声明被提升了一样。</li>
</ul>
<h2 id="let-const">let &amp; const</h2>
<p>let 和 const 是 es6 的新特性，值得注意的是，let 和 const 所声明的变量，似乎不会被提升了。</p>
<pre><code class="language-js">function test() {
    console.log(myVar);
    let myVar = 10;
    console.log(myVar);
}
test(); // Output
//\&gt; VM94:2 Uncaught ReferenceError: Cannot access 'myVar' before initialization
//    at test (&lt;anonymous&gt;:2:14)
//   at &lt;anonymous&gt;:6:1
</code></pre>
<p><code>reference error</code>  报错：作用域范围错误<br>
相同的代码，我们使用 <code>let</code> 或 <code>const</code> 去替代 <code>var</code> 去声明一个变量，我们不能在变量声明之前去访问它了。<br>
这就引申出<strong>暂时性死区（Temporal Dead Zone）</strong> 的概念了。</p>
<h2 id="暂时性死区-temporal-dead-zone">暂时性死区 (Temporal Dead Zone)</h2>
<p>我们将暂时性死区，定义为<strong>变量出现在作用域范围内，但是却不能被访问的状态</strong>。<br>
所以，这是不是意味这 <code>let</code> 和 <code>const</code> 不会在创建阶段，加入到那块内存呢？<br>
其实都会加入到内存中，进行一个初始化。只不过<code>var</code> 所声明的变量会被初始化为 <code>undefined</code>  ，而 <code>let</code> 和 <code>const</code> 不被赋值（甚至连 <code>undefined</code> 都不是）</p>
<pre><code class="language-js">function test() {
    // 随意打印一个未曾定义的变量
    console.log(typeof myUndefinedVariable);
    // 打印以下 let 声明的变量
    console.log(typeof myVar);
    let myVar = 10;
}
test();// Output
\&gt; undefined
\&gt; VM114:3 Uncaught ReferenceError: Cannot access 'myVar' before initialization
    at test (&lt;anonymous&gt;:3:10)
    at &lt;anonymous&gt;:6:1
</code></pre>
<h2 id="思考">思考🤔</h2>
<p>暂时性死区似乎是引入了 bug？其实这是 ES6 有意而为之。实际上就是「无规矩不成方圆」。<br>
JS 这门语言如果一味地追求灵活性，「纵容」开发者写出不合乎常理的代码，却不会对其进行相应的「惩罚」，长久下去，将阻碍 JS 标准的制定。<br>
这就是 ES6 引入 let 和 const 的原因。对于一个变量，没有任何理由多此一举地在定义它之前去调用它。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[40 个有趣的 CSS 网站]]></title>
        <id>https://zhoulion.github.io/me/post/40-ge-you-qu-de-css-wang-zhan/</id>
        <link href="https://zhoulion.github.io/me/post/40-ge-you-qu-de-css-wang-zhan/">
        </link>
        <updated>2021-08-12T01:51:24.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>🌐  基础学习</p>
<ul>
<li><a href="https://cssreference.io/">CSS 参考书</a></li>
<li><a href="https://chokcoco.github.io/CSS-Inspiration/#/">CSS 灵感</a></li>
<li><a href="https://www.awwwards.com/sites/zero-impact">UI 设计师的灵感源泉</a></li>
<li><a href="https://htmlcheatsheet.com/css/">交互式在线 CSS 速记表</a></li>
<li><a href="https://zh.learnlayout.com/">学习CSS布局</a></li>
<li><a href="https://css-tricks.com/">CSS-Tricks</a></li>
<li><a href="https://web.dev/learn/css/">Learn CSS</a>   -- 谷歌家 <a href="http://web.dev">web.dev</a> 上的 CSS 教学专栏</li>
<li><a href="https://www.w3schools.com/howto/">W3Schools How TO - Code snippets for HTML, CSS and JavaScript</a> --- W3 How To 学习如何实现常见的页面组件</li>
<li><a href="https://codemyui.com/tag/pure-css/">450 多个纯 CSS 实现的 UI 设计 Ξ ℂ𝕠𝕕𝕖𝕄𝕪𝕌𝕀</a></li>
</ul>
</li>
<li>
<p>🧚  CSS 动画<br>
纯 CSS 动画，这里不包含 JS 动画库</p>
<ul>
<li><a href="https://animate.style/">Animate.css | A cross-browser library of CSS animations.</a> --- css 动画集</li>
<li><a href="https://tholman.com/obnoxious/">Obnoxious.css</a> --- 不过脑子的动效，不过看起来很“生猛”</li>
<li><a href="https://elrumordelaluz.github.io/csshake/">CSS 抖动特效</a></li>
<li><a href="https://animxyz.com/">CSS 三维变换动画</a></li>
<li><a href="https://animista.net/play/">Animista - CSS Animations on Demand</a> --- CSS 动画集，可自由调节动画参数，生成代码片段</li>
<li><a href="https://ianlunn.github.io/Hover/">Hover.css - A collection of CSS3 powered hover effects</a>  --- CSS 鼠标悬浮动画</li>
<li><a href="https://www.minimamente.com/project/magic/">Magic CSS animations</a> --- 一款非常适合做转场动画的 CSS 动画库</li>
</ul>
</li>
<li>
<p>🕹️  教学游戏</p>
<ul>
<li><a href="https://cssgridgarden.com/">Grid Garden</a> --- CSS 萝卜浇水，学习网格布局</li>
<li><a href="http://www.flexboxdefense.com/">Flexbox Defense</a> --- CSS 塔防游戏，学习 flex 布局</li>
<li><a href="https://flukeout.github.io/">CSS Diner</a> --- CSS 干饭，练习 CSS 选择器</li>
<li><a href="https://flexboxfroggy.com/">Flexbox Froggy</a> --- 送小青蛙回家，学习 flex 布局</li>
</ul>
</li>
<li>
<p>🎰  代码生成</p>
<ul>
<li>
<p><a href="https://cssboxshadow.com/">Box Shadow</a> --- 盒子阴影生成器</p>
</li>
<li>
<p><a href="https://glassgenerator.netlify.app/">Glass Morphism</a> --- 磨砂透明效果</p>
</li>
<li>
<p><a href="https://coolbackgrounds.io/">Cool Backgrounds</a> --- 酷酷的背景图</p>
</li>
<li>
<p><a href="https://www.pixelartcss.com/">Pixel Art to CSS</a> --- 自定义像素素材</p>
</li>
<li>
<p><a href="https://stripesgenerator.com/">Pure CSS Stripes Generator - No Flash, No Image, ONLY CSS</a> --- 布条背景图生成器</p>
</li>
<li>
<p><a href="https://svgwave.in/">Svg Wave - A free &amp; beautiul gradient SVG wave Generator.</a> --- 波纹生成器</p>
</li>
<li>
<p><a href="https://numl.design/theme-generator">CSS Color Theme Generator by Numl.Design</a> --- numl design 的主题生成器</p>
</li>
<li>
<p><a href="https://color.adobe.com/zh/create/color-accessibility">adobe 色彩拾取工具</a> --- adobe 针对色盲用户可访问性，提供的一个色彩拾取工具</p>
</li>
<li>
<p><a href="https://9elements.github.io/fancy-border-radius/">Fancy Border Radius Generator</a> --- 圆角的新玩法</p>
</li>
<li>
<p>根据上面的圆角，我们可以画出一滴水珠💦 <a href="https://codepen.io/prathkum/pen/xxEMoZy">https://codepen.io/prathkum/pen/xxEMoZy</a></p>
</li>
<li>
<p><a href="https://accordionslider.com/">CSS Accordion Slider Generator</a> --- 纯 CSS 百叶窗</p>
</li>
<li>
<p><a href="https://grid.layoutit.com/">Layoutit Grid - CSS Grids layouts made easy!</a> --- 网格布局生成器</p>
</li>
<li>
<p><a href="https://csslayout.io/">CSS Layout ∙ A collection of popular layouts and patterns made with CSS</a> --- 纯 CSS 的页面元素集</p>
</li>
<li>
<p><a href="https://keyframes.app/animate/">Keyframes.app | CSS Toolbox</a> --- CSS 动画生成器</p>
</li>
<li>
<p><a href="https://cssanimate.com/">CSS3 Keyframes Animation Generator</a> --- 又一个 CSS 动画生成器</p>
</li>
<li>
<p><a href="https://www.cssfiltergenerator.com/">CSSfiltergenerator.com</a> --- CSS 滤镜</p>
</li>
<li>
<p><a href="https://imageslidermaker.com/">Image Slider Maker</a> --- 轮播生成器</p>
</li>
<li>
<p><a href="https://www.30secondsofcode.org/css/p/1">CSS Snippets - 30 seconds of code</a> --- 30 秒代码片段 — css 篇</p>
</li>
</ul>
</li>
<li>
<p>🎨  色彩搭配</p>
<ul>
<li><a href="https://colorhunt.co/">Color Palettes for Designers and Artists - Color Hunt</a></li>
<li><a href="https://mycolor.space/">ColorSpace - Color Palettes Generator and Color Gradient Tool</a></li>
<li><a href="https://cssgradient.io/">CSS Gradient - Generator, Maker, and Background</a> --- CSS 渐变色</li>
<li><a href="https://clrs.cc/">Colors - A nicer color palette for the web.</a></li>
</ul>
</li>
</ul>
<h2 id="参考">参考：</h2>
<p><a href="https://github.com/jobbole/awesome-css-cn">https://github.com/jobbole/awesome-css-cn</a> CSS 资源大全中文版</p>
<p><a href="https://github.com/awesome-css-group/awesome-css">https://github.com/awesome-css-group/awesome-css</a> Awesome CSS</p>
<p><a href="https://juejin.cn/post/6903712420485660685">https://juejin.cn/post/6903712420485660685</a> 一些CSS特效网站整理</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript 中的内置范型]]></title>
        <id>https://zhoulion.github.io/me/post/typescript-zhong-de-nei-zhi-fan-xing/</id>
        <link href="https://zhoulion.github.io/me/post/typescript-zhong-de-nei-zhi-fan-xing/">
        </link>
        <updated>2021-08-12T00:16:15.000Z</updated>
        <content type="html"><![CDATA[<p><code>Typescript</code> 的 lib 文件夹中，定义了 <code>EcmaScript</code> 从 es5 到 esnext 的各个 es 类型签名，还包括 dom。其中，在 <code>lib/lib.es5.d.ts</code> 文件中，还定义了 ts 自己内置的范型工具类型。</p>
<p>下面是从中提取的代码片段，针对注释进行的简单翻译.</p>
<pre><code class="language-typescript">/**
 * 让 T 类型中的所有的属性都是可选
 */
type Partial&lt;T&gt; = {
    [P in keyof T]?: T[P];
};

/**
 * 使 T 类型中所有属性都是必需的
 */
type Required&lt;T&gt; = {
    [P in keyof T]-?: T[P];
};

/**
 * 使 T 类型中所有的属性只读
 */
type Readonly&lt;T&gt; = {
    readonly [P in keyof T]: T[P];
};

/**
 * 就是从 T 类型中，选择一组键在 K 中的并集
 * - Pick&lt;T, K&gt; 就是拾取的意思，就是从 T 类型对象中拾取部分的属性, 其中 K 是字符枚举类型
 */
type Pick&lt;T, K extends keyof T&gt; = {
    [P in K]: T[P];
};

/**
 * 构建一个类型，其中 K 属性 key，对应的属性值是 T 类型
 * 这个理解起来很抽象，🌰 vue 的 option api 用到了很多 Record&lt;T, K&gt; 范型
 * 如 components?: Record&lt;string, Component&gt;
      directives?: Record&lt;string, Directive&gt;
 */
type Record&lt;K extends keyof any, T&gt; = {
    [P in K]: T;
};

/**
 * 从T中排除那些可分配给U的类型
 * 主要用途就是从 T 类型中提取不在 U 枚举中的 key，作为一个新的枚举
 */
type Exclude&lt;T, U&gt; = T extends U ? never : T;

/**
 * 从 T 类型中提取那些可分配给 U 的类型
 * 从源码中也能看出来，它的使用场景和 Exclude 刚好相反。
 * 目的和 Pick 类似，但是 Pick 关注于提取一个新的对象类型，而 Extract 在于提取枚举类型
 */
type Extract&lt;T, U&gt; = T extends U ? T : never;

/**
 * 构建一个类型，提取 T 类型中的 K 属性的反集
 * Omit 意为删除， 它和 Pick 作用相反，把对象 T 中的 K 属性都排除掉。
 */
type Omit&lt;T, K extends keyof any&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;

/**
 * 排除 T 类型中所有的 null 和 undefined
 */
type NonNullable&lt;T&gt; = T extends null | undefined ? never : T;

/**
 * 获取一个函数类型的参数类型，放在一个 tuple 元组内
 * 这样提取一个方法的入参类型，可以很方便的去定义到另一个函数的参数类型
 */
type Parameters&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: infer P) =&gt; any ? P : never;

/**
 * 获取一个构造函数类型的参数类型，放在一个 tuple 元组内
 * 如果我们的构造函数是以 class 的范式去书写的，那么这个辅助范型就很有用
 */
type ConstructorParameters&lt;T extends abstract new (...args: any) =&gt; any&gt; = T extends abstract new (...args: infer P) =&gt; any ? P : never;

/**
 * 返回一个函数类型的返回值类型
 * 很容易理解。结合 Parameters 就可以把一个以后的函数类型拆开来，较少很多重复的类型声明
 */
type ReturnType&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: any) =&gt; infer R ? R : any;

/**
 * 获取一个构造函数类型的返回值类型
 * 这个真的很少用到，因为构造函数的类型返回值类型，往往就是构造函数本身。
 * 除非一种情形，构造函数里返回了一个新的对象。因为根据 JS 对构造函数返回值的规定，构造函数的 return 值，通常会被忽略，除非是高级类型，如对象，数组
 */
type InstanceType&lt;T extends abstract new (...args: any) =&gt; any&gt; = T extends abstract new (...args: any) =&gt; infer R ? R : any;

/**
 * Convert string literal type to uppercase
 */
type Uppercase&lt;S extends string&gt; = intrinsic;

/**
 * Convert string literal type to lowercase
 */
type Lowercase&lt;S extends string&gt; = intrinsic;

/**
 * Convert first character of string literal type to uppercase
 */
type Capitalize&lt;S extends string&gt; = intrinsic;

/**
 * Convert first character of string literal type to lowercase
 */
type Uncapitalize&lt;S extends string&gt; = intrinsic;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://zhoulion.github.io/me/post/hello-gridea/</id>
        <link href="https://zhoulion.github.io/me/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>